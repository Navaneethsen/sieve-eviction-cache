# This workflow will build a Java project with Maven, run tests, and publish artifacts
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Run tests
      run: mvn clean test

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: mvn clean compile package -DskipTests
    
    - name: Upload JAR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifacts
        path: target/*.jar
        retention-days: 30

  publish:
    # Only run on main branch pushes or releases
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Increment version
      id: increment_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        
        # Remove -SNAPSHOT if present
        VERSION_WITHOUT_SNAPSHOT=${CURRENT_VERSION%-SNAPSHOT}
        
        # Split version into parts (major.minor.patch)
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION_WITHOUT_SNAPSHOT"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
        # Set the new version in pom.xml
        mvn versions:set -DnewVersion=$NEW_VERSION
        mvn versions:commit
    
    - name: Configure Maven for GitHub Packages
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <settings>
          <servers>
            <server>
              <id>github</id>
              <username>${{ github.actor }}</username>
              <password>${{ secrets.GITHUB_TOKEN }}</password>
            </server>
          </servers>
        </settings>
        EOF
    
    - name: Build and publish to GitHub Packages
      run: mvn clean deploy -DskipTests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Commit version increment
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pom.xml
        git commit -m "ðŸ”– Bump version to ${{ steps.increment_version.outputs.new_version }} [skip ci]" || exit 0
        git push
